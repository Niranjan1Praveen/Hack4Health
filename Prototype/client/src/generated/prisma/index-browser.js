
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImage: 'profileImage',
  createdAt: 'createdAt',
  role: 'role'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  eventName: 'eventName',
  eventDescription: 'eventDescription',
  organizerName: 'organizerName',
  email: 'email',
  contact: 'contact',
  eventLocation: 'eventLocation',
  volunteerCapacity: 'volunteerCapacity',
  registrationLink: 'registrationLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  SkillsRequired: 'SkillsRequired',
  InternshipRoles: 'InternshipRoles',
  VolunteerExperience: 'VolunteerExperience'
};

exports.Prisma.VolunteerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  salutation: 'salutation',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  homeStreet: 'homeStreet',
  homeCity: 'homeCity',
  homeState: 'homeState',
  postalCode: 'postalCode',
  homeCountry: 'homeCountry',
  mobilePhone: 'mobilePhone',
  employer: 'employer',
  educationalLevel: 'educationalLevel',
  maritalStatus: 'maritalStatus',
  employmentStatus: 'employmentStatus',
  willingTravelDistance: 'willingTravelDistance',
  helpInDisaster: 'helpInDisaster',
  hasDisability: 'hasDisability',
  skills: 'skills',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CSR_Main_TableScalarFieldEnum = {
  EventID: 'EventID',
  ActivityName: 'ActivityName',
  LocationVillageCity: 'LocationVillageCity',
  District: 'District',
  State: 'State',
  DateOfImplementation: 'DateOfImplementation',
  NumberOfVolunteers: 'NumberOfVolunteers',
  CorporateSponsor: 'CorporateSponsor',
  NGOPartner: 'NGOPartner',
  VolunteerHoursLogged: 'VolunteerHoursLogged',
  GenderDistribution: 'GenderDistribution',
  CommunityBeneficiaries: 'CommunityBeneficiaries',
  CSRBudgetAllocated: 'CSRBudgetAllocated',
  CSRBudgetUtilized: 'CSRBudgetUtilized',
  VolunteerFeedbackScore: 'VolunteerFeedbackScore',
  CommunitySatisfactionScore: 'CommunitySatisfactionScore',
  RemarksChallenges: 'RemarksChallenges'
};

exports.Prisma.VeltrixGlobalSolutionsScalarFieldEnum = {
  EventID: 'EventID',
  HouseholdsCovered: 'HouseholdsCovered',
  AwarenessKitsDistributed: 'AwarenessKitsDistributed',
  MockDrillsConducted: 'MockDrillsConducted',
  EarlyWarningSystemInstalled: 'EarlyWarningSystemInstalled',
  LocalAuthorityCollaboration: 'LocalAuthorityCollaboration'
};

exports.Prisma.NoventraTechnologiesIncScalarFieldEnum = {
  EventID: 'EventID',
  AreaRestoredSqM: 'AreaRestoredSqM',
  NativeFloraPlanted: 'NativeFloraPlanted',
  WasteRemovedKg: 'WasteRemovedKg',
  BiodiversitySpeciesCount: 'BiodiversitySpeciesCount',
  WaterQualityImprovementScore: 'WaterQualityImprovementScore'
};

exports.Prisma.AureviaInternationalHoldingsScalarFieldEnum = {
  EventID: 'EventID',
  TreesPlanted: 'TreesPlanted',
  SaplingSurvivalRatePercent: 'SaplingSurvivalRatePercent',
  SpeciesDiversityCount: 'SpeciesDiversityCount',
  GeoTaggingEnabled: 'GeoTaggingEnabled',
  PostPlantationCareProvided: 'PostPlantationCareProvided'
};

exports.Prisma.ZentaraDynamicsCorporationScalarFieldEnum = {
  EventID: 'EventID',
  TreesPlanted: 'TreesPlanted',
  SaplingSurvivalRatePercent: 'SaplingSurvivalRatePercent',
  SpeciesDiversityCount: 'SpeciesDiversityCount',
  GeoTaggingEnabled: 'GeoTaggingEnabled',
  PostPlantationCareProvided: 'PostPlantationCareProvided'
};

exports.Prisma.TrionyxSystemsWorldwideScalarFieldEnum = {
  EventID: 'EventID',
  TankersSupplied: 'TankersSupplied',
  WaterDeliveredLiters: 'WaterDeliveredLiters',
  HouseholdsReached: 'HouseholdsReached',
  WaterDistributionPoints: 'WaterDistributionPoints',
  HygieneKitsDistributed: 'HygieneKitsDistributed'
};

exports.Prisma.InboxScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  eventName: 'eventName',
  eventDescription: 'eventDescription',
  organizerName: 'organizerName',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  VOLUNTEER: 'VOLUNTEER',
  ORGANIZATION: 'ORGANIZATION',
  CORPORATE: 'CORPORATE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  Volunteer: 'Volunteer',
  CSR_Main_Table: 'CSR_Main_Table',
  VeltrixGlobalSolutions: 'VeltrixGlobalSolutions',
  NoventraTechnologiesInc: 'NoventraTechnologiesInc',
  AureviaInternationalHoldings: 'AureviaInternationalHoldings',
  ZentaraDynamicsCorporation: 'ZentaraDynamicsCorporation',
  TrionyxSystemsWorldwide: 'TrionyxSystemsWorldwide',
  Inbox: 'Inbox'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
